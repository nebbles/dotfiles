#!/bin/sh
#
# dot
#
# `dot` handles installation, updates, things like that. Run it periodically
# to make sure you're on the latest and greatest.

set -e

thisDirectory="$(cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd -P)"
dotfilesDirectory="$(cd "$( dirname "$thisDirectory" )" && pwd -P)"

# We change directory to ensure that everything that runs from this file is in
# the context of the dotfiles repository location
cd $dotfilesDirectory

# CLI helper function
displayUsageAndExit() {
	echo "dot -- dotfiles management"
	echo ""
	echo "Usage: dot [options]"
	echo ""
	echo "Options:"
	echo "  -e, --edit          Open dotfiles directory for editing"
	echo "  -h, --help          Show this help message and exit"
	echo "  --set-macos         Set the defaults for macOS"
	echo "  --brew              Install/update Homebrew on the system"
	echo "  --install-scripts   Run all install scripts in dot repo"
	echo "  --bootstrap         Runs all installs and update functions"
	echo "  make [targets]      Access to the underlying make file of repo"
	exit
}

# Handle the Command Line arguments.
if [[ $1 = "" ]]
then
displayUsageAndExit
fi

# while test $# -gt 0; do
# while test $#; do
while [[ -n "$1" ]]
do
	case "$1" in
        "make")
            $@
            exit
            ;;
        "--debug")
            echo "DEBUGGING: this is a test"
			;;
		"-h"|"--help")
			displayUsageAndExit
			;;
		"-e"|"--edit")
			exec "$EDITOR" "$dotfilesDirectory"
			exit
			;;
        "--set-macos")
            make macos
            ;;
        "--brew")
            make brew
            ;;
        "--install-scripts")
            make install-scripts
            ;;
        "--bootstrap")
            make bootstrap
            ;;
		*)
			echo "Invalid option: $1"
			displayUsageAndExit
			;;
	esac
	shift # moves args left by one (i.e. $2 shifts to $1)
done

export DOTFILES=$HOME/.dotfiles
